1)
login: 1

@startuml

participant Actor
participant Loginpage
participant logincontroller
participant Users<<entity>>
participant WebAppDashboard

    Actor -> Loginpage: inserts Login details
    activate Loginpage    
    activate logincontroller
    Loginpage -> logincontroller: Authenticate(login_detail)
    activate Users
    logincontroller->Users:isExists()

    alt invalid user
    Users-->logincontroller:False
    logincontroller --> Loginpage: invalid user
    Loginpage-->Actor:incorrect email or password

    else authentication successful
    Users-->logincontroller:True
    deactivate Users
    logincontroller --> Loginpage: Authentication successful
    deactivate logincontroller
    activate WebAppDashboard
    Loginpage -> WebAppDashboard: Redirect to dashboard
    destroy Loginpage
    deactivate WebAppDashboard
    end
@enduml

2)
register: 1

@startuml
actor Student
participant RegistrationPage <<boundary>>
participant RegistrationController <<control>>
participant StudentData <<entity>>
participant Loginpage<<boundary>>

activate RegistrationPage
Student -> RegistrationPage: Enter registration details
RegistrationPage -> RegistrationController: validateRegistration(details)
activate RegistrationController

alt Validation Failed
    RegistrationController --> RegistrationPage: Registration Failed
    RegistrationPage --> Student: Error Message (e.g., "Invalid details" or "Student ID already exists")
else Validation Successful
    RegistrationController -> StudentData: saveStudent(details)
    activate StudentData
    deactivate StudentData
    RegistrationController --> RegistrationPage: Registration Successful
    deactivate RegistrationController
    RegistrationPage --> Student: Registration Successful Message
    activate Loginpage
    RegistrationPage->Loginpage:Redirects to login page
    destroy RegistrationPage
    deactivate  Loginpage
end
deactivate RegistrationController
@enduml