1)
login: 1

@startuml

participant Actor
participant Loginpage
participant logincontroller
participant Users<<entity>>
participant WebAppDashboard

    Actor -> Loginpage: inserts Login details
    activate Loginpage    
    activate logincontroller
    Loginpage -> logincontroller: Authenticate(login_detail)
    activate Users
    logincontroller->Users:isExists()

    alt invalid user
    Users-->logincontroller:False
    logincontroller --> Loginpage: invalid user
    Loginpage-->Actor:incorrect email or password

    else authentication successful
    Users-->logincontroller:True
    deactivate Users
    logincontroller --> Loginpage: Authentication successful
    deactivate logincontroller
    activate WebAppDashboard
    Loginpage -> WebAppDashboard: Redirect to dashboard
    destroy Loginpage
    deactivate WebAppDashboard
    end
@enduml

2)
register: 1

@startuml
actor Student
participant RegistrationPage <<boundary>>
participant RegistrationController <<control>>
participant StudentData <<entity>>
participant Loginpage<<boundary>>

activate RegistrationPage
Student -> RegistrationPage: Enter registration details
RegistrationPage -> RegistrationController: validateRegistration(details)
activate RegistrationController

alt Validation Failed
    RegistrationController --> RegistrationPage: Registration Failed
    RegistrationPage --> Student: Error Message (e.g., "Invalid details" or "Student ID already exists")
else Validation Successful
    RegistrationController -> StudentData: saveStudent(details)
    activate StudentData
    deactivate StudentData
    RegistrationController --> RegistrationPage: Registration Successful
    deactivate RegistrationController
    RegistrationPage --> Student: Registration Successful Message
    activate Loginpage
    RegistrationPage->Loginpage:Redirects to login page
    destroy RegistrationPage
    deactivate  Loginpage
end
deactivate RegistrationController
@enduml


3)Club-Create post: 1

@startuml
actor Club
participant "Dashboard" <<boundary>>
participant postform<<boundary>>
participant "PostController" <<control>>
participant "Posts" <<entity>>

activate Dashboard
Club -> Dashboard: Select "Create Post"
activate postform
Dashboard -> postform: openPostForm()
deactivate Dashboard

Club -> postform: fillPostForm(title, content, tags, expirationDate)
activate PostController
postform-> PostController: Postnews(news)

alt Validation Successful
    PostController -> Posts: savePost(post)
    activate Posts
    PostController-->postform: Post Saved
    postform-->Club:News Created Successfully
    deactivate Posts
else Validation Failed
    PostController --> postform: Invalid post
    postform-->Club: Fill out the missing fields
    deactivate PostController
    deactivate postform
end

@enduml


5) PR-post general :1

@startuml
actor Student
actor PR
participant "Dashboard" <<boundary>>
participant postform<<boundary>>
participant "PostController" <<control>>
participant "Posts" <<entity>>
participant "NotificationService" <<control>>

activate Dashboard
PR -> Dashboard: Select "Create Post"
activate postform
Dashboard -> postform: openPostForm()
deactivate Dashboard

PR-> postform: fillPostForm(title, description, tags)
postform -> PostController: Postnews(news)

alt Validation Successful
    PostController -> Posts: SavePost(post)
    activate Posts
    Posts --> PostController: Post Saved
    deactivate Posts
    
    PostController -> NotificationService: notifyStudents(postDetails)
    activate NotificationService
    NotificationService --> Student: Sends notification
    deactivate NotificationService

    PostController --> postform : Posted seccussfully
    postform --> PR: Post Published Successfully
else Validation Failed
    PostController -> postform: displayValidationErrors()
    postform -> PR: Display Error Messages
end

deactivate Dashboard
deactivate PostController
@enduml

6)Review and approve : 0

@startuml
actor PR
actor Club
actor Student
boundary Dashboard
boundary pendingnewspage
boundary reviewpage
boundary ReviewController
entity Posts
control Notificationcontroller

activate Dashboard
PR -> Dashboard: Select Review Page
Dashboard -> pendingnewspage: open()
activate pendingnewspage
activate ReviewController
pendingnewspage -> ReviewController: requestpostdata()
ReviewController->Posts: getPendingPosts()
activate Posts

alt  No Pending Posts
    Posts -->ReviewController: No posts exist
    ReviewController --> pendingnewspage: No pending news
    pendingnewspage --> PR : No pending posts to review.
else Pending Posts Exist
    Posts-->ReviewController: posts
    ReviewController -> pendingnewspage :posts
    PR -> pendingnewspage: select Post
    pendingnewspage->reviewpage: open()
    destroy pendingnewspage
    activate reviewpage
    reviewpage-> ReviewController: requestpostdata()
    ReviewController->Posts: getpostdata()
    Posts-->ReviewController:post
    ReviewController-->reviewpage: post

    alt Post Approved
        PR->reviewpage:select "approved"
        reviewpage->ReviewController:Approved(Post)
        ReviewController -> Posts: approvePost(post)
        Posts --> ReviewController: postPublished()
        deactivate Posts
        ReviewController -> Notificationcontroller: notify()
        activate Notificationcontroller
        Notificationcontroller --> Club: Post Approved Notification
        Notificationcontroller -->Student: New Post 
    else Post Rejected
        PR -> reviewpage: Comment and select reject
        reviewpage -> ReviewController: checkandreject()
        ReviewController -> Posts: rejectPost(post, comments)
        activate Posts
        Posts --> ReviewController: postRejected()
        deactivate Posts
        ReviewController -> Notificationcontroller: notifyClubPresident(postRejected)
        Notificationcontroller --> Club: Post Rejected Notification with Comments
        deactivate Notificationcontroller
    end
end

deactivate ReviewController
deactivate Dashboard
@enduml


7) manage post club : 1

@startuml
actor Club
boundary Dashboard
boundary postednews
boundary editpage
entity "Posts" 

activate Dashboard
Club -> Dashboard: Select manage Posts
activate postednews
Dashboard -> postednews: open()
destroy Dashboard
activate Posts
postednews -> Posts: getSubmittedPosts()

alt  No Submitted Posts
    Posts --> postednews: No submitted posts
    postednews --> Club: No submitted posts available.
else Submitted Posts Exist
    Posts--> postednews: posts
    Club -> postednews: select Post
    postednews->editpage:open()
    destroy postednews
    activate editpage
    Club -> editpage: edit content and select submit
    editpage -> Posts: updatepost()
    Posts-->editpage:  Updated successfully
    editpage-->Club: Updated Successfully
    deactivate Posts
    deactivate
end

deactivate Dashboard
@enduml 

8) rejected posts club: 1

@startuml
actor Club
boundary Dashboard
boundary rejectednews
boundary editpage
entity "Posts" 

activate Dashboard
Club -> Dashboard: Select rejected Posts
activate rejectednews
Dashboard -> rejectednews: open()
destroy Dashboard
activate Posts
rejectednews -> Posts: getrejectedPosts()

alt  No Submitted Posts
    Posts --> rejectednews: No rejected posts
    rejectednews --> Club: No rejected posts available.
else Submitted Posts Exist
    Posts--> rejectednews: posts with the rejecton comment
    Club -> rejectednews: select Post
    rejectednews->editpage:open()
    destroy rejectednews
    activate editpage
    Club -> editpage: edit content and select submit
    editpage -> Posts: updatepost()
    Posts-->editpage:  Updated successfully
    editpage-->Club: Updated Successfully
    deactivate Posts
    deactivate editpage
end

deactivate Dashboard
@enduml

9)View pending news: 1

 @startuml
actor Club
boundary Dashboard
boundary Pendingnews
entity Posts

activate Dashboard
Club -> Dashboard: Select Pending Posts
activate Pendingnews
Dashboard -> Pendingnews: open()
destroy Dashboard
activate Posts
Pendingnews -> Posts: getpendingPosts()

alt post exists
Posts--> Pendingnews: pots
else post doesn't exist
Posts --> Pendingnews:Posts doesn't exist
Pendingnews-->Club: No pending news exist.
deactivate Pendingnews
end

@enduml

10) view news feed: 1
@startuml
actor Student
boundary Dashboard
control Postcontroller
entity Posts

activate Dashboard
Student -> Dashboard: Select News Feed
activate Posts
activate Postcontroller
Dashboard-> Postcontroller: requestdata()
Postcontroller--> Posts: retrievedata()
Posts --> Postcontroller: return posts
Postcontroller->Dashboard:posts

Student ->Dashboard:Select post
Dashboard-> Postcontroller: requestpostdata(post)
Postcontroller-> Posts: retrievepostdata(post)
Posts --> Postcontroller: return post
Postcontroller-->Dashboard: post
deactivate Postcontroller

deactivate Dashboard
deactivate Posts
@enduml

11) search :1

@startuml
actor Student
boundary Dashboard
control Postcontroller
entity Posts

activate Dashboard
Student -> Dashboard: Select Search and input post title
activate Posts
activate Postcontroller
Dashboard-> Postcontroller: requestpostdata(title)
Postcontroller--> Posts: retrievedata()
alt post exists
Posts --> Postcontroller: return post
Postcontroller->Dashboard:post
else post doesn't exist
Posts --> Postcontroller: post doesn't exist
Postcontroller->Dashboard: Show nothing
deactivate Postcontroller
deactivate Dashboard
deactivate Posts
end
@enduml

12) pr manage : 1

@startuml
actor PR
boundary adminDashboard_page
boundary postednews_page
boundary editpage_page
entity "Posts" 

activate adminDashboard_page
PR -> adminDashboard_page: Select manage Posts
activate postednews_page
adminDashboard_page -> postednews_page: open()
destroy adminDashboard_page
activate Posts
postednews_page -> Posts: getSubmittedPosts()

alt  No Submitted Posts
    Posts --> postednews_page: No submitted posts
    postednews_page --> PR: No submitted posts available.
else Submitted Posts Exist
    Posts--> postednews_page: posts
    PR -> postednews_page: select Post
    postednews_page->editpage_page:open()
    destroy postednews_page
    activate editpage_page
    PR -> editpage_page: edit content and select submit
    editpage_page -> Posts: updatepost()
    Posts-->editpage_page:  Updated successfully
    editpage_page-->PR: Updated Successfully
    deactivate Posts
    deactivate editpage_page
end

deactivate adminDashboard_page
@enduml 