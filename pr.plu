Create post 1

@startuml
actor Student
actor PR
boundary Dashboard
boundary postformpage
control PostController
entity Posts
control NotificationService

activate Dashboard
PR -> Dashboard: Select "Create Post"
activate postformpage
Dashboard -> postformpage: openPostForm()
destroy Dashboard

PR-> postformpage: fillPostForm(title, description, tags)
postformpage -> PostController: Postnews(news)
activate PostController

alt Validation Successful
    PostController -> Posts: SavePost(post)
    activate Posts
    Posts --> PostController: Post Saved
    deactivate Posts
    
    PostController -> NotificationService: notifyStudents(post)
    activate NotificationService
    NotificationService --> Student: Sends notification
    deactivate NotificationService

    PostController --> postformpage : Posted seccussfully
    postformpage --> PR: Post Published Successfully
else Validation Failed
    PostController -> postformpage : displayValidationErrors()
    deactivate PostController
    postformpage -> PR: Display Error Messages
    deactivate postformpage
end
@enduml


Review and approve  1

@startuml
actor PR
actor Club
actor Student
boundary Dashboard
boundary pendingnewspage
boundary reviewpage
boundary ReviewController
entity Posts
control Notificationcontroller

activate Dashboard
PR -> Dashboard: Select Review Page
Dashboard -> pendingnewspage: open()
activate pendingnewspage
activate ReviewController
pendingnewspage -> ReviewController: requestpostdata()
ReviewController->Posts: getPendingPosts()
activate Posts

alt  No Pending Posts
    Posts -->ReviewController: No posts exist
    ReviewController --> pendingnewspage: No pending news
    pendingnewspage --> PR : No pending posts to review.
else Pending Posts Exist
    Posts-->ReviewController: posts
    ReviewController -> pendingnewspage :posts
    PR -> pendingnewspage: select Post
    pendingnewspage->reviewpage: open()
    destroy pendingnewspage
    activate reviewpage
    reviewpage-> ReviewController: requestpostdata()
    ReviewController->Posts: getpostdata()
    Posts-->ReviewController:post
    ReviewController-->reviewpage: post

    alt Post Approved
        PR->reviewpage:select "approved"
        reviewpage->ReviewController:Approved(Post)
        ReviewController -> Posts: approvePost(post)
        Posts --> ReviewController: postPublished()
        deactivate Posts
        ReviewController -> Notificationcontroller: notify()
        activate Notificationcontroller
        Notificationcontroller --> Club: Post Approved Notification
        Notificationcontroller -->Student: New Post 
    else Post Rejected
        PR -> reviewpage: Comment and select reject
        reviewpage -> ReviewController: checkandreject()
        ReviewController -> Posts: rejectPost(post, comments)
        activate Posts
        Posts --> ReviewController: postRejected()
        deactivate Posts
        ReviewController -> Notificationcontroller: notifyClubPresident(postRejected)
        Notificationcontroller --> Club: Post Rejected Notification with Comments
        deactivate Notificationcontroller
    end
end

deactivate ReviewController
deactivate Dashboard
@enduml


pr manage his post

@startuml
actor PR
boundary adminDashboard
boundary postednews
boundary editpage
control Postcontroller
entity "Posts" 

activate adminDashboard
PR -> adminDashboard: Select manage Posts
activate postednews
adminDashboard -> postednews: open()
destroy adminDashboard
activate Posts
activate Postcontroller
postednews -> Postcontroller:getsubmittednews()
Postcontroller->Posts: getSubmittedPosts()

alt  No Submitted Posts
    Posts --> Postcontroller:No posts
    Postcontroller-->postednews: No submitted posts
    postednews --> PR: display No submitted posts available.
else Submitted Posts Exist
    Posts--> Postcontroller:posts
    Postcontroller-->postednews: posts
    PR -> postednews: select Post
    postednews->editpage:open()
    destroy postednews
    activate editpage
    PR -> editpage: edit content and select submit
    editpage -> Postcontroller: updatenews(postid)
    Postcontroller->Posts: updatepost(postid)
    Posts-->Postcontroller: updated successfully
    Postcontroller-->editpage:  Updated successfully
    deactivate Posts
    deactivate Postcontroller
    editpage-->PR: display Updated Successfully
    deactivate editpage
end

@enduml 